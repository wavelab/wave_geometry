# wave_geometry - a manifold geometry library for robotics
# Copyright (c) 2018 Leo Koppel (Waterloo Autonomous Vehicles Lab)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# Config file for wave package: find wave_geometry and its dependencies
#
# This script exports a target called wave_geometry.
# Note this install is curently separate from that of libwave, which has
# modules such as wave::utils.
#
# For example, to link "my_target" against wave_geometry and its dependencies,
# call:
#     find_package(wave_geometry REQUIRED)
#     target_link_libaries(my_target wave_geometry)
#
# Note that this command is sufficient to add all required libraries, include
# directories, and other compile flags to the target.
#
# This file defines the following variables:
#
# wave_geometry_FOUND: True if wave_geometry and required dependencies were
#             successfully found. WAVE_GEOMETRY_FOUND is also set.
#
# WAVE_GEOMETRY_VERSION: The version number found

@PACKAGE_INIT@

# Prints a failure message and exits, setting WAVE_FOUND=FALSE
# Arguments are printed at the end of the message.
MACRO(WAVE_FAIL)
    # Check variables set by find_package() depending on its QUIET and REQUIRED
    # options, and print a different type of message accordingly
    IF(wave_geometry_FIND_REQUIRED)
        MESSAGE(FATAL_ERROR "Failed to find wave_geometry: " ${ARGN})
    ELSEIF(NOT wave_FIND_QUIETLY)
        MESSAGE(WARNING "Failed to find wave_geometry: " ${ARGN})
    ENDIF()

    # Tell FIND_PACKAGE that this package should be considered "not found"
    SET(wave_FOUND FALSE)
    # Set this all-caps version only as a courtesy to users, who may be
    # mistakenly (but understandably) expecting this convention
    SET(WAVE_FOUND FALSE)
    RETURN()
ENDMACRO(WAVE_FAIL)


SET(WAVE_GEOMETRY_VERSION @WAVE_GEOMETRY_PACKAGE_VERSION@)
SET_AND_CHECK(WAVE_GEOMETRY_EXTRA_CMAKE_DIR
    "${CMAKE_CURRENT_LIST_DIR}/@WAVE_GEOMETRY_EXTRA_CMAKE_DIR@")

# Find dependencies used by wave_geometry, and where dependencies do not provide
# imported targets, define them.
LIST(APPEND CMAKE_MODULE_PATH "${WAVE_GEOMETRY_EXTRA_CMAKE_DIR}")
# Currently the only dependency is Eigen.
INCLUDE(${WAVE_GEOMETRY_EXTRA_CMAKE_DIR}/AddEigen3.cmake)

# Include auto-generated targets file
INCLUDE("${CMAKE_CURRENT_LIST_DIR}/wave_geometryTargets.cmake")

# Check that for each component in waveTargets (even non-requested ones), its
# dependencies are found. If not, print a warning in non-quiet mode (since they
# must have been there at build time, something is up).
GET_TARGET_PROPERTY(wave_geometry_deps wave_geometry INTERFACE_LINK_LIBRARIES)
MESSAGE(STATUS "wave_geometry dependencies: ${wave_geometry_deps}")

# wave_geometry_FOUND, with exact case, is the variable set and used by
# FIND_PACKAGE(). Setting it here is redundant, but is done for clarity. The
# second variable is provided only as a courtesy to users who may expect
# all-caps names.
SET(wave_geometry_FOUND TRUE)
SET(WAVE_GEOMETRY_FOUND TRUE)
